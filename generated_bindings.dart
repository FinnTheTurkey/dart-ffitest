// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void hello_world() {
    return _hello_world();
  }

  late final _hello_worldPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('hello_world');
  late final _hello_world = _hello_worldPtr.asFunction<void Function()>();

  SpecialNumbers get_special_numbers() {
    return _get_special_numbers();
  }

  late final _get_special_numbersPtr =
      _lookup<ffi.NativeFunction<SpecialNumbers Function()>>(
          'get_special_numbers');
  late final _get_special_numbers =
      _get_special_numbersPtr.asFunction<SpecialNumbers Function()>();

  int check_special_numbers(
    SpecialNumbers numbers,
  ) {
    return _check_special_numbers(
      numbers,
    );
  }

  late final _check_special_numbersPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(SpecialNumbers)>>(
          'check_special_numbers');
  late final _check_special_numbers =
      _check_special_numbersPtr.asFunction<int Function(SpecialNumbers)>();

  ffi.Pointer<SpecialNumbers> get_pointer() {
    return _get_pointer();
  }

  late final _get_pointerPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<SpecialNumbers> Function()>>(
          'get_pointer');
  late final _get_pointer =
      _get_pointerPtr.asFunction<ffi.Pointer<SpecialNumbers> Function()>();

  int check_pointer(
    ffi.Pointer<SpecialNumbers> ptr,
  ) {
    return _check_pointer(
      ptr,
    );
  }

  late final _check_pointerPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<SpecialNumbers>)>>(
      'check_pointer');
  late final _check_pointer =
      _check_pointerPtr.asFunction<int Function(ffi.Pointer<SpecialNumbers>)>();
}

class SpecialNumbers extends ffi.Struct {
  @ffi.Int32()
  external int number1;

  @ffi.Float()
  external double number2;
}
